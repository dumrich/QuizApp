/**
 * Invoke your custom commands.
 * @packageDocumentation
 */
/** @ignore */
declare global {
    interface Window {
        rpc: {
            notify: (command: string, args?: {
                [key: string]: unknown;
            }) => void;
        };
    }
}
/**
 * Transforms a callback function to a string identifier that can be passed to the backend.
 * The backend uses the identifier to `eval()` the callback.
 *
 * @return A unique identifier associated with the callback function.
 */
declare function transformCallback(callback?: (response: any) => void, once?: boolean): string;
/** Command arguments. */
export interface InvokeArgs {
    [key: string]: unknown;
}
/**
 * Sends a message to the backend.
 *
 * @param cmd The command name.
 * @param args The optional arguments to pass to the command.
 * @return A promise resolving or rejecting to the backend response.
 */
declare function invoke<T>(cmd: string, args?: InvokeArgs): Promise<T>;
export { transformCallback, invoke };
